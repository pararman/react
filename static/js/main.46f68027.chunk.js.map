{"version":3,"sources":["MyTable.js","Form.js","OtherForm.js","AlertsTable.js","ArticlesTable.js","EventsTable.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","marginTop","spacing","overflowX","table","minWidth","parkData","SimpleTable","data","classes","react_default","a","createElement","Paper","className","Table","TableHead","TableRow","TableCell","TableBody","map","row","key","id","component","scope","name","description","states","parkCode","designation","Form","state","code","keyword","change","e","_this","setState","Object","defineProperty","target","value","onSubmit","preventDefault","props","_this2","this","placeholder","onChange","onClick","React","Component","OtherForm","stateCode","onSubmit2","title","category","url","listingdescription","parkfullname","feeinfo","infourl","App","fields","alertsData","articlesData","eventsData","parkStateCode","finishedUrl","request","XMLHttpRequest","open","onload","JSON","parse","response","send","forceUpdate","api_key","finishedAlertsUrl","alerts","alertsRequest","method","finishedArtUrl","art","artRequest","finishedEventsUrl","events","eventsRequest","Form_Form","OtherForm_OtherForm","AlertsTable_SimpleTable","ArticlesTable_SimpleTable","EventsTable_SimpleTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46f68027.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme: any) => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 650,\n  },\n}));\n  \n  var parkData = [];\n  \n  export default function SimpleTable(data) { \n  const classes = useStyles();\n  parkData = data.data;\n  if (typeof parkData === \"undefined\") {\n    return (\n      <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Park Name</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell>State</TableCell>\n            <TableCell>Code</TableCell>\n            <TableCell>Designation</TableCell>\n          </TableRow>\n        </TableHead>\n      </Table>\n    </Paper>\n    );\n  }\n  else {\n    //Goes through and adds the data to the table\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Park Name</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell>State</TableCell>\n            <TableCell>Code</TableCell>\n            <TableCell>Designation</TableCell>\n          </TableRow>\n        </TableHead>\n        \n        \n        <TableBody>\n          {parkData.map(row => (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">{row.name}</TableCell>\n              <TableCell>{row.description}</TableCell>\n              <TableCell>{row.states}</TableCell>\n              <TableCell>{row.parkCode}</TableCell>\n              <TableCell>{row.designation}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n  }\n}","import React from \"react\";\n\nexport default class Form extends React.Component {\n    state = {\n        code: \"\",\n        states: \"\",\n        keyword: \"\",\n    }\n    \n    change = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n    \n    onSubmit = e => {\n        e.preventDefault();\n        this.props.onSubmit(this.state);\n        this.setState({\n          code: \"\",\n          states: \"\",\n          keyword: \"\",\n        });\n    }\n    \n    render() {\n        return (\n            <form>\n                <input\n                name=\"code\"\n                placeholder='Park Code'\n                value={this.state.code}\n                onChange={e => this.change(e)}/>\n                <br />\n                <input\n                name=\"states\"\n                placeholder='Park State'\n                value={this.state.states}\n                onChange={e => this.change(e)}/>\n                <br />\n                <input\n                name=\"keyword\"\n                placeholder='Keyword Search'\n                value={this.state.keyword}\n                onChange={e => this.change(e)}/>\n                <br />\n                \n                <button onClick={(e) => this.onSubmit(e)}>Submit</button>\n                <br />\n            </form>\n        )\n    }\n}","import React from \"react\";\n\nexport default class OtherForm extends React.Component {\n    state = {\n        stateCode: \"\",\n        parkCode: \"\",\n    }\n    \n    change = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n    \n    onSubmit2 = e => {\n        e.preventDefault();\n        this.props.onSubmit(this.state);\n        this.setState({\n          description: \"\",\n        });\n    }\n    \n    render() {\n        return (\n            <form>\n                <input\n                name=\"parkCode\"\n                placeholder='Park Code'\n                value={this.state.parkCode}\n                onChange={e => this.change(e)}/>\n                <br />\n                <input\n                name=\"stateCode\"\n                placeholder='State Code'\n                value={this.state.stateCode}\n                onChange={e => this.change(e)}/>\n                <br />\n                <button onClick={(e) => this.onSubmit2(e)}>Submit</button>\n                <br />\n            </form>\n        )\n    }\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme: any) => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 650,\n  },\n}));\n  \n  var parkData = [];\n  \n  export default function SimpleTable(data) { \n  const classes = useStyles();\n  parkData = data.data;\n  if (typeof parkData === \"undefined\") {\n    return (\n      <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Title</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell>Category</TableCell>\n            <TableCell>URL</TableCell>\n          </TableRow>\n        </TableHead>\n      </Table>\n    </Paper>\n    );\n  }\n  else {\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Title</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell>Category</TableCell>\n            <TableCell>URL</TableCell>\n          </TableRow>\n        </TableHead>\n        \n        \n        <TableBody>\n          {parkData.map(row => (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">{row.title}</TableCell>\n              <TableCell>{row.description}</TableCell>\n              <TableCell>{row.category}</TableCell>\n              <TableCell>{row.url}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n  }\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme: any) => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 650,\n  },\n}));\n  \n  var parkData = [];\n  \n  export default function SimpleTable(data) { \n  const classes = useStyles();\n  parkData = data.data;\n  if (typeof parkData === \"undefined\") {\n    return (\n      <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Title</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell>URL</TableCell>\n          </TableRow>\n        </TableHead>\n      </Table>\n    </Paper>\n    );\n  }\n  else {\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Title</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell>URL</TableCell>\n          </TableRow>\n        </TableHead>\n        \n        \n        <TableBody>\n          {parkData.map(row => (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">{row.title}</TableCell>\n              <TableCell>{row.description}</TableCell>\n              <TableCell>{row.listingdescription}</TableCell>\n              <TableCell>{row.url}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n  }\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme: any) => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 650,\n  },\n}));\n  \n  var parkData = [];\n  \n  export default function SimpleTable(data) { \n  const classes = useStyles();\n  parkData = data.data;\n  if (typeof parkData === \"undefined\") {\n    return (\n      <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Park</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell>Category</TableCell>\n            <TableCell>URL</TableCell>\n          </TableRow>\n        </TableHead>\n      </Table>\n    </Paper>\n    );\n  }\n  else {\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Park</TableCell>\n            <TableCell>Description</TableCell>\n            \n            <TableCell>Fee</TableCell>\n            <TableCell>URL</TableCell>\n          </TableRow>\n        </TableHead>\n        \n        \n        <TableBody>\n          {parkData.map(row => (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">{row.parkfullname}</TableCell>\n              <TableCell>{row.description}</TableCell>\n              <TableCell>{row.feeinfo}</TableCell>\n              <TableCell>{row.infourl}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n  }\n}","import React, { Component } from \"react\";\nimport MyTable from \"./MyTable.js\";\nimport Form from \"./Form\";\nimport OtherForm from \"./OtherForm\";\nimport AlertsTable from \"./AlertsTable\";\nimport ArticlesTable from \"./ArticlesTable\";\nimport EventsTable from \"./EventsTable\";\nimport \"./App.css\";\n\n\nclass App extends Component{\n    \n    state = {\n        //Form fields\n        fields: {},\n        //parks data from the fields API call\n        data: [],\n        //Alerts data from the fields API call\n        alertsData: [],\n        articlesData: [],\n        eventsData:[],\n        parkStateCode: {},\n    };\n\n    onSubmit = fields => {\n        this.setState({ fields });\n        \n        //Update Table with the Fields We Just Got\n        let baseUrl = 'https://developer.nps.gov/api/v1/parks?';\n        let api_key = '&api_key=52wv1KfR6OcLfwOlqCepI3nwHIcsNfAyZchqFUtV';\n        let parkCode = '';\n        if(typeof fields.code !== \"undefined\") {\n            parkCode = 'parkCode=' + fields.code;\n        }   \n        let stateCode = '&stateCode=' + fields.states;\n        let searchTerm = '&q=' + fields.keyword;\n        let finishedUrl = baseUrl + parkCode + stateCode + searchTerm + api_key\n                \n        var parkData = [];\n        var request = new XMLHttpRequest(),\n        method = 'GET',\n        url = finishedUrl;\n        request.open(method, url, false)\n            request.onload = function() {\n            // Begin accessing JSON data here\n            var data = JSON.parse(this.response)\n            parkData = data;\n        }\n        request.send() \n        \n        this.setState({data: parkData});\n        this.forceUpdate();\n    };\n    \n    onSubmit2 = description => {\n        this.setState({parkStateCode: description});\n        //Takes the data from the form then makes the API calls using that data\n        \n        let api_key = '&api_key=52wv1KfR6OcLfwOlqCepI3nwHIcsNfAyZchqFUtV';\n        let parkCode = '';\n        let stateCode = '&stateCode=' + description.stateCode;\n        \n        let alertsUrl = 'https://developer.nps.gov/api/v1/alerts?';\n        let eventsUrl = 'https://developer.nps.gov/api/v1/events?';\n        let articlesUrl = 'https://developer.nps.gov/api/v1/articles?';\n            \n        if (typeof description.parkCode !== \"undefined\"){\n            let parkCode = 'parkCode=' + description.parkCode;\n        }\n        if (typeof description.stateCode !== \"undefined\"){\n            let stateCode = 'stateCode=' + description.stateCode;\n        }\n        \n        //Alerts\n        let finishedAlertsUrl = alertsUrl + parkCode + stateCode + api_key;\n        var alerts = [];\n        var alertsRequest = new XMLHttpRequest(),\n        method = 'GET',\n        url = finishedAlertsUrl;\n        alertsRequest.open(method, url, false)\n            alertsRequest.onload = function() {\n            // Begin accessing JSON data here\n            var data = JSON.parse(this.response)\n            alerts = data;\n        }\n        alertsRequest.send()\n        this.setState({alertsData: alerts})\n        \n        //Articles\n        let finishedArtUrl = articlesUrl + parkCode + stateCode + api_key;\n        var art = [];\n        var artRequest = new XMLHttpRequest(),\n        method = 'GET',\n        url = finishedArtUrl;\n        artRequest.open(method, url, false)\n            artRequest.onload = function(){\n                var data = JSON.parse(this.response)\n                art = data;\n            }\n        artRequest.send();\n        this.setState({articlesData: art});\n        \n        //Events\n        let finishedEventsUrl = eventsUrl + parkCode + stateCode + api_key;\n        var events = [];\n        var eventsRequest = new XMLHttpRequest(),\n        method = 'GET',\n        url = finishedEventsUrl;\n        eventsRequest.open(method, url, false)\n            eventsRequest.onload = function(){\n                var data = JSON.parse(this.response)\n                events = data;\n\n            }\n        eventsRequest.send();\n        this.setState({eventsData: events});\n        \n        this.forceUpdate();\n        \n        \n    }\n    \n    \n    \n    render() {\n        return (\n            //Works by rendering each of the forms then the table\n            <div className=\"App\">\n            <h1> National Park Service Information Kiosk </h1>\n                <p>(Use state abbreviations, not everything has to be filled in)</p>\n                <p>(For detailed information use the state code and park code given in 'Park Information' and enter it into 'Details Search')</p>\n                <p>Park Search</p>\n                <Form onSubmit={fields => this.onSubmit(fields)} />\n                <p>Details Search</p>\n                <OtherForm onSubmit={description => this.onSubmit2(description)} />\n                <p><br />Park Information</p>\n                <MyTable data={ this.state.data.data } />\n                <p> Alerts </p>\n                <AlertsTable data = {this.state.alertsData.data} />\n                <p>Articles</p>\n                <ArticlesTable data = {this.state.articlesData.data}/>\n                <p>Events</p>\n                <EventsTable data = {this.state.eventsData.data} />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}